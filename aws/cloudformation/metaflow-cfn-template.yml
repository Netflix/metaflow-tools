AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for complete deployment of Metaflow

Parameters:

  VPCCidr:
    Type: String
    Default: 10.20.0.0/16
    Description: 'CIDR for the Metaflow VPC'
  Subnet1Cidr:
    Type: String
    Default: 10.20.0.0/24
    Description: 'CIDR for Metaflow VPC Subnet 1'
  Subnet2Cidr:
    Type: String
    Default: 10.20.1.0/24
    Description: 'CIDR for Metaflow VPC Subnet 2'
  MaxVCPUBatch:
    Type: Number
    Default: 64
    AllowedValues: [16,32,64,96]
    MinValue: 16
    MaxValue: 96
    Description: 'Maximum VCPUs for Batch Compute Environment [16-96]'
  MinVCPUBatch:
    Type: Number
    Default: 8
    MinValue: 0
    MaxValue: 16
    AllowedValues: [0,2,4,8,16]
    Description: 'Maximum VCPUs for Batch Compute Environment [2-16]'
  DesiredVCPUBatch:
    Type: Number
    Default: 8
    MinValue: 2
    MaxValue: 16
    AllowedValues: [2,4,8,16]
    Description: 'Desired Starting VCPUs for Batch Compute Environment [2-16]'
  CustomRole:
    Type: String
    Default: 'false'
    AllowedValues: ['false', 'true']
    Description: 'Enable custom role with restricted permissions?'
  APIBasicAuth:
    Type: String
    Default: 'false'
    AllowedValues: ['false', 'true']
    Description: 'Enable basic auth for API Gateway? (requires key export)'
  Notebook:
    Type: String
    Default: 'false'
    AllowedValues: ['false', 'true']
    Description: 'Enable creation of a notebook?'
  SagemakerInstance:
    Type: String
    Default: ml.t2.large
    AllowedValues: ["ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge"]
    Description: "Instance type for Sagemaker Notebook"
  NotebookIdleTimeInSeconds: 
    Type: Number
    Description: "Shut down an idle notebook after the number of seconds specified (e.g. 14400 for 4 hours). Set to -1 if you do not want to shut it down at all."
    Default: "-1"

Mappings:
  ServiceInfo:
    StackName:
      value: 'metaflow-infrastructure'
    ServiceName:
      value: 'metadata-service'
    ImageUrl:
      value: 'netflixoss/metaflow_metadata_service'
    ContainerPort:
      value: 8080
    ContainerCpu:
      value: 512
    ContainerMemory:
      value: 1024
    Path:
      value: '*'
    Priority:
      value: 1
    DesiredCount:
      value: 1
    Role:
      value: ""
Conditions:
  EnableAuth: !Equals [ !Ref APIBasicAuth, 'true']
  EnableRole: !Equals [ !Ref CustomRole, 'true']
  EnableNotebook: !Equals [ !Ref Notebook, 'true']
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCidr
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref Subnet1Cidr
      MapPublicIpOnLaunch: true
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref Subnet2Cidr
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  DefaultGateway:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  Subnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable
  Subnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Fargate
      VpcId: !Ref 'VPC'
  NLBIngressRule:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      Description: 'Allow API Calls Internally'
      GroupId: !Ref FargateSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      CidrIp: !GetAtt 'VPC.CidrBlock'
  FargateInternalRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Internal Communication
      GroupId: !Ref 'FargateSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateSecurityGroup'
  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Type: network
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - NLB
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'NLBTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'NLB'
      Port: 80
      Protocol: TCP
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSInstanceRole
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  MetadataSvcECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CustomS3Batch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: ObjectAccessMetadataService
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join ['', [ !GetAtt 'MetaflowS3Bucket.Arn', '/*' ]]
        - PolicyName: DenyPresignedBatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: DenyPresignedBatch
              Effect: Deny
              Action: s3:*
              Resource: '*'
              Condition:
                StringNotEquals:
                  s3:authType: REST-HEADER
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !FindInMap ['ServiceInfo', 'ServiceName', 'value']
      Cpu: !FindInMap ['ServiceInfo', 'ContainerCpu', 'value']
      Memory: !FindInMap ['ServiceInfo', 'ContainerMemory', 'value']
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      TaskRoleArn: !GetAtt 'MetadataSvcECSTaskRole.Arn'
      ContainerDefinitions:
        - Name: !FindInMap ['ServiceInfo', 'ServiceName', 'value']
          Environment:
            - Name: "MF_METADATA_DB_HOST"
              Value: !GetAtt 'RDSMasterInstance.Endpoint.Address'
            - Name: "MF_METADATA_DB_PORT"
              Value: "5432"
            - Name: "MF_METADATA_DB_USER"
              Value: "master"
            - Name: "MF_METADATA_DB_PSWD"
              Value: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSSecret, ':SecretString:password}}' ]]
            - Name: "MF_METADATA_DB_NAME"
              Value: "metaflow"
          Cpu: !FindInMap ['ServiceInfo', 'ContainerCpu', 'value']
          Memory: !FindInMap ['ServiceInfo', 'ContainerMemory', 'value']
          Image: !FindInMap ['ServiceInfo', 'ImageUrl', 'value']
          PortMappings:
            - ContainerPort: !FindInMap ['ServiceInfo', 'ContainerPort', 'value']
  ECSFargateService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !FindInMap ['ServiceInfo', 'ServiceName', 'value']
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !FindInMap ['ServiceInfo', 'DesiredCount', 'value']
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'FargateSecurityGroup'
          Subnets:
            - !Ref 'Subnet1'
            - !Ref 'Subnet2'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !FindInMap ['ServiceInfo', 'ServiceName', 'value']
          ContainerPort: !FindInMap ['ServiceInfo', 'ContainerPort', 'value']
          TargetGroupArn: !Ref 'NLBTargetGroup'
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !FindInMap ['ServiceInfo', 'ContainerPort', 'value']
      Protocol: TCP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup for RDS instances
      SubnetIds:
        - Ref: Subnet1
        - Ref: Subnet2
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS
      VpcId: !Ref 'VPC'
  PostgresIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'RDSSecurityGroup'
      SourceSecurityGroupId: !Ref 'FargateSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
  RDSMasterInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: 'metaflow'
      AllocatedStorage: 20
      DBInstanceClass: 'db.t2.small'
      DeleteAutomatedBackups: 'true'
      StorageType: 'gp2'
      StorageEncrypted: 'true'
      Engine: 'postgres'
      EngineVersion: '11.5'
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSSecret, ':SecretString:password}}' ]]
      VPCSecurityGroups:
        - !Ref 'RDSSecurityGroup'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
  MyRDSSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "This is a Secrets Manager secret for an RDS DB instance"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "master"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
  SecretRDSInstanceAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref MyRDSSecret
      TargetId: !Ref RDSMasterInstance
      TargetType: AWS::RDS::DBInstance
  MetaflowS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  SagemakerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: 'Security Group for Sagemaker'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 8080
          ToPort: 8080
  MetaflowUserRole:
    Condition: 'EnableRole'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            AWS:
              - !GetAtt 'MetadataSvcECSTaskRole.Arn'
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: "Metaflow-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:*Stack"
                  - "cloudformation:*ChangeSet"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-*"
              - Effect: "Allow"
                Action:
                  - "s3:*Object"
                Resource:
                  - !GetAtt 'MetaflowS3Bucket.Arn'
                  - !Join ['', [ !GetAtt 'MetaflowS3Bucket.Arn', '/*' ]]
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
              - Effect: "Allow"
                Action:
                  - "sagemaker:DescribeNotebook*"
                  - "sagemaker:StartNotebookInstance"
                  - "sagemaker:StopNotebookInstance"
                  - "sagemaker:UpdateNotebookInstance"
                  - "sagemaker:CreatePresignedNotebookInstanceUrl"
                Resource:
                  - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance/${AWS::StackName}-*"
                  - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance-lifecycle-config/basic*"
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                Resource:
                  - !Sub "aws:aws:kms:${AWS::Region}:${AWS::AccountId}:key/"
        - PolicyName: BatchPerms
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: JobsPermissions
              Effect: Allow
              Action:
                - "batch:TerminateJob"
                - "batch:DescribeJobs"
                - "batch:DescribeJobDefinitions"
                - "batch:DescribeJobQueues"
                - "batch:RegisterJobDefinition"
              Resource: '*'
            - Sid: DefinitionsPermissions
              Effect: Allow
              Action:
                - "batch:SubmitJob"
              Resource:
                - !Ref "JobQueue"
                - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*:*
        - PolicyName: CustomS3ListAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: BucketAccess
              Effect: Allow
              Action: s3:ListBucket
              Resource: !GetAtt 'MetaflowS3Bucket.Arn'
        - PolicyName: LogPerms
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: GetLogs
              Effect: Allow
              Action: logs:GetLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
        - PolicyName: AllowSagemaker
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: AllowSagemakerCreate
              Effect: Allow
              Action: sagemaker:CreateTrainingJob
              Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
            - Sid: AllowSagemakerDescribe
              Effect: Allow
              Action: sagemaker:DescribeTrainingJob
              Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
  RandomString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Random String'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        ExcludePunctuation: 'true'
        PasswordLength: 8
        ExcludeCharacters: '"@/\'
  BatchS3TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CustomS3ListBatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: BucketAccessBatch
              Effect: Allow
              Action: s3:ListBucket
              Resource: !GetAtt 'MetaflowS3Bucket.Arn'
        - PolicyName: CustomS3Batch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: ObjectAccessBatch
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: !Join ['', [ !GetAtt 'MetaflowS3Bucket.Arn', '/*' ]]
        - PolicyName: DenyPresignedBatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: DenyPresignedBatch
              Effect: Deny
              Action: s3:*
              Resource: '*'
              Condition:
                StringNotEquals:
                  s3:authType: REST-HEADER
        - PolicyName: AllowSagemaker
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: AllowSagemakerCreate
              Effect: Allow
              Action: sagemaker:CreateTrainingJob
              Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
            - Sid: AllowSagemakerDescribe
              Effect: Allow
              Action: sagemaker:DescribeTrainingJob
              Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
            - Sid: AllowSagemakerDeploy
              Effect: Allow
              Action:
                - "sagemaker:CreateModel"
                - "sagemaker:CreateEndpointConfig"
                - "sagemaker:CreateEndpoint"
                - "sagemaker:DescribeModel"
                - "sagemaker:DescribeEndpoint"
                - "sagemaker:InvokeEndpoint"
              Resource:
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/*"
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:model/*"
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint-config/*"
        - PolicyName: IAM_PASS_ROLE
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: AllowPassRole
              Effect: Allow
              Action: iam:PassRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:PassedToService: sagemaker.amazonaws.com
  BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - batch.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: IAM_PASS_ROLE
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor0
              Effect: Allow
              Action: iam:PassRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - ec2.amazonaws.com
                    - ec2.amazonaws.com.cn
                    - ecs-tasks.amazonaws.com
        - PolicyName: custom_access_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - ec2:DescribeAccountAttributes
                - ec2:DescribeInstances
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
                - ec2:DescribeKeyPairs
                - ec2:DescribeImages
                - ec2:DescribeImageAttribute
                - ec2:DescribeSpotInstanceRequests
                - ec2:DescribeSpotFleetInstances
                - ec2:DescribeSpotFleetRequests
                - ec2:DescribeSpotPriceHistory
                - ec2:DescribeVpcClassicLink
                - ec2:DescribeLaunchTemplateVersions
                - ec2:CreateLaunchTemplate
                - ec2:DeleteLaunchTemplate
                - ec2:RequestSpotFleet
                - ec2:CancelSpotFleetRequests
                - ec2:ModifySpotFleetRequest
                - ec2:TerminateInstances
                - ec2:RunInstances
                - autoscaling:DescribeAccountLimits
                - autoscaling:DescribeAutoScalingGroups
                - autoscaling:DescribeLaunchConfigurations
                - autoscaling:DescribeAutoScalingInstances
                - autoscaling:CreateLaunchConfiguration
                - autoscaling:CreateAutoScalingGroup
                - autoscaling:UpdateAutoScalingGroup
                - autoscaling:SetDesiredCapacity
                - autoscaling:DeleteLaunchConfiguration
                - autoscaling:DeleteAutoScalingGroup
                - autoscaling:CreateOrUpdateTags
                - autoscaling:SuspendProcesses
                - autoscaling:PutNotificationConfiguration
                - autoscaling:TerminateInstanceInAutoScalingGroup
                - ecs:DescribeClusters
                - ecs:DescribeContainerInstances
                - ecs:DescribeTaskDefinition
                - ecs:DescribeTasks
                - ecs:ListClusters
                - ecs:ListContainerInstances
                - ecs:ListTaskDefinitionFamilies
                - ecs:ListTaskDefinitions
                - ecs:ListTasks
                - ecs:CreateCluster
                - ecs:DeleteCluster
                - ecs:RegisterTaskDefinition
                - ecs:DeregisterTaskDefinition
                - ecs:RunTask
                - ecs:StartTask
                - ecs:StopTask
                - ecs:UpdateContainerAgent
                - ecs:DeregisterContainerInstance
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - iam:GetInstanceProfile
                - iam:GetRole
              Resource: '*'
        - PolicyName: iam_custom_policies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor3
              Effect: Allow
              Action: iam:CreateServiceLinkedRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:AWSServiceName:
                  - autoscaling.amazonaws.com
                  - ecs.amazonaws.com
        - PolicyName: ec2_custom_policies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor4
              Effect: Allow
              Action: ec2:CreateTags
              Resource: '*'
              Condition:
                StringEquals:
                  ec2:CreateAction: RunInstances
  ComputeEnvironment:
    DependsOn:
      - ECSInstanceProfile
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt 'BatchExecutionRole.Arn'
      ComputeEnvironmentName: !Join [ "-", [ 'batch-compute-env', !Ref 'AWS::StackName' ] ]
      ComputeResources:
        MaxvCpus: !Ref MaxVCPUBatch
        SecurityGroupIds:
          - !Ref SagemakerSecurityGroup
        Type: EC2
        Subnets:
          - !Ref Subnet1
          - !Ref Subnet2
        MinvCpus: !Ref MinVCPUBatch
        InstanceRole:  !GetAtt 'ECSInstanceProfile.Arn'
        InstanceTypes:
          - p2
          - p3
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c4.8xlarge
        DesiredvCpus: !Ref DesiredVCPUBatch
      State: ENABLED
  JobQueue:
    DependsOn:
      - ComputeEnvironment
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Join [ "-", [ 'batch-compute-env', !Ref 'AWS::StackName' ] ]
      State: ENABLED
      Priority: 1
      JobQueueName: !Join [ "-", [ 'job-queue', !Ref 'AWS::StackName' ] ]
  Api:
    DependsOn: VpcLink
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'api'] ]
  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api
      PathPart: '{proxy+}'
  VpcLink:
      Type: AWS::ApiGateway::VpcLink
      Properties:
          Name: !Join ['-', [!Ref 'AWS::StackName', 'vpclink'] ]
          TargetArns:
              - !Ref NLB
  ProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ApiKeyRequired: !If [ EnableAuth, 'true', !Ref "AWS::NoValue" ]
      ResourceId: !Ref ApiResource
      RestApiId: !Ref Api
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Join ['', ['http://', !GetAtt 'NLB.DNSName', '/{proxy}'] ]
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
  ApiDeployment:
    DependsOn:
      - ProxyMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref Api
      StageName: api
  ApiKey:
    Condition: 'EnableAuth'
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - Api
      - ApiDeployment
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', ApiKey] ]
      Enabled: 'true'
  ApiUsagePlan:
    Condition: 'EnableAuth'
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn:
      - Api
      - ApiDeployment
    Properties:
      ApiStages:
      - ApiId: !Ref Api
        Stage: api
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]
  ApiUsagePlanKey:
    Condition: 'EnableAuth'
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn:
      - Api
      - ApiDeployment
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
  RandomString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Random String (misusing password for this)"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        ExcludePunctuation: "true"
        ExcludeUppercase: "true"
        PasswordLength: 8
        ExcludeCharacters: '"@/\-_'
        
  # Create a SageMaker notebook and the corresponding resources

  SageMakerExecutionRole:
    Condition: "EnableNotebook"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - sagemaker.amazonaws.com
          Action:
            - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: IamPassRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowPassRole"
              Effect: Allow
              Action: "iam:PassRole"
              Resource: "*"
              Condition:
                StringEquals:
                  iam:PassedToService: sagemaker.amazonaws.com
        - PolicyName: IamPassRoleMetaflowEcsS3AccessIamRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowPassRole"
              Effect: Allow
              Action: "iam:PassRole"
              Resource: !GetAtt 'BatchS3TaskRole.Arn'
        - PolicyName: EcrPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowEcr"
              Effect: Allow
              Action:
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
              Resource: "*"
        - PolicyName: BatchPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowBatch"
              Effect: Allow
              Action:
                - "batch:ListJobs"
                - "batch:DescribeComputeEnvironments"
                - "batch:DescribeJobDefinitions"
                - "batch:RegisterJobDefinition"
                - "batch:TerminateJob"
                - "batch:DescribeJobs"
                - "batch:DescribeJobQueues"
                - "batch:CancelJob"
                - "batch:SubmitJob"
              Resource: "*"
        - PolicyName: CloudWatchPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowCloudWatch"
              Effect: Allow
              Action:
                - "cloudwatch:PutMetricData"
              Resource: "*"
        - PolicyName: LogPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "CreateLogStream"
                Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                Resource:
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/batch/job:log-stream:*"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:*"]]
              - Sid: "LogEvents"
                Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                Resource:
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:", !Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}", "/jupyter.log"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:", !Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}", "/LifecycleConfigOnCreate"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:", !Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}", "/LifecycleConfigOnStart"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/batch/job:log-stream:*"]]
              - Sid: "LogGroup"
                Effect: Allow
                Action:
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:CreateLogGroup"
                Resource: "*"
        - PolicyName: SageMakerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "SageMakerNotebook"
              Effect: Allow
              Action:
                - "sagemaker:DescribeNotebook*"
                - "sagemaker:StartNotebookInstance"
                - "sagemaker:StopNotebookInstance"
                - "sagemaker:UpdateNotebookInstance"
                - "sagemaker:CreatePresignedNotebookInstanceUrl"
              Resource:
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance/${AWS::StackName}*"
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance-lifecycle-config/basic*"
        - PolicyName: AllowSagemaker
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowSagemakerCreate
                Effect: Allow
                Action: sagemaker:CreateTrainingJob
                Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
              - Sid: AllowSagemakerDescribe
                Effect: Allow
                Action: sagemaker:DescribeTrainingJob
                Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
        - PolicyName: CustomS3ListAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "BucketAccess"
              Effect: Allow
              Action: "s3:ListBucket"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref MetaflowS3Bucket]]
        - PolicyName: CustomS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "ObjectAccess"
              Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:DeleteObject"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref MetaflowS3Bucket, "/*"]]
        - PolicyName: DenyPresigned
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "DenyPresigned"
              Effect: Deny
              Action: s3:*
              Resource: "*"
              Condition:
                StringNotEquals:
                  s3:authType: REST-HEADER
  BasicNotebookInstanceLifecycleConfig:
    Condition: "EnableNotebook"
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      OnCreate:
        - Content:
            Fn::Base64: !Sub |
              #!/bin/bash
              echo 'Creating notebook...'
      OnStart:
        - Content:
            Fn::Base64: !Sub |
              #!/bin/bash

              set -e

              #################
              # Auto Shutdown 
              #################
              
              # This script stops a SageMaker notebook once it's idle for more than 4 hours (default time)
              # You can change the idle time for stop using the environment variable below.
              # If you want the notebook the stop only if no browsers are open, remove the --ignore-connections flag

              # PARAMETERS
              idle_time=${NotebookIdleTimeInSeconds}

              echo "Fetching the autostop script"
              wget https://raw.githubusercontent.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/master/scripts/auto-stop-idle/autostop.py

              echo "Starting the SageMaker autostop script in cron"
              
              if (( idle_time > 0 )); then
                echo "Adding idle time cronjob"
                (crontab -l 2>/dev/null; echo "5 * * * * /usr/bin/python $PWD/autostop.py --time $idle_time --ignore-connections") | crontab -
              else
                echo "Idle time is smaller than 0 minutes, not adding to crontab"
              fi

              ##################################
              # Init Metaflow Config
              ##################################

              echo "Exporting Metaflow Env Variables"
              env_variables='export AWS_DEFAULT_REGION="${AWS::Region}" && export METAFLOW_HOME="/home/ec2-user/.metaflowconfig" && export METAFLOW_PROFILE="default"' 

              echo $env_variables >> /etc/profile.d/jupyter-env.sh 
              initctl restart jupyter-server --no-wait

              sudo -u ec2-user -i <<'EOF'

              ##################################
              # Install Python packages
              ##################################

              # now installing metaflow and testing the connection 
              # We use the tensorflow_p36 environment for this
              source /home/ec2-user/anaconda3/bin/activate tensorflow_p36

              pip install --upgrade metaflow
              pip install --upgrade click 

              ##################################
              # Create the Metaflow config and install the tutorials
              ##################################

              echo "Creating Metaflow config"
              mkdir -p $METAFLOW_HOME
              metaflow_config_file=$METAFLOW_HOME/config_$METAFLOW_PROFILE.json

              # it is hard to do multiline strings in CF, therefore we are appending to the metaflow config
              echo '{ ' > $metaflow_config_file

              # due to restrictions regarding IAM policies and conditional resources like the API key, we are not 
              # retrieving automatically here. 
              if [[ "${APIBasicAuth}" == "true" ]]; then 
                echo "\"METAFLOW_SERVICE_AUTH_KEY\": \"PASTE_API_KEY_HERE\"," >> $metaflow_config_file
              fi

              echo '"METAFLOW_DEFAULT_DATASTORE": "s3",' >> $metaflow_config_file
              echo '"METAFLOW_DATASTORE_SYSROOT_S3": "s3://${MetaflowS3Bucket}/metaflow",' >> $metaflow_config_file
              echo '"METAFLOW_DATATOOLS_SYSROOT_S3": "s3://${MetaflowS3Bucket}/data",' >> $metaflow_config_file
              echo '"METAFLOW_BATCH_JOB_QUEUE": "${JobQueue}",' >> $metaflow_config_file
              echo '"METAFLOW_BATCH_CONTAINER_IMAGE": "python:3",' >> $metaflow_config_file
              echo '"METAFLOW_BATCH_CONTAINER_REGISTRY": "docker.io",' >> $metaflow_config_file
              echo '"METAFLOW_ECS_S3_ACCESS_IAM_ROLE": "${BatchS3TaskRole.Arn}",' >> $metaflow_config_file
              echo '"METAFLOW_DEFAULT_METADATA": "service",' >> $metaflow_config_file
              echo '"METADATA_SERVICE_URL": "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/",' >> $metaflow_config_file
              echo '"METAFLOW_SERVICE_URL": "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/",' >> $metaflow_config_file
              echo '"METAFLOW_CONDA_PACKAGE_S3ROOT": "s3://${MetaflowS3Bucket}/conda"' >> $metaflow_config_file
              echo '}' >> $metaflow_config_file

              # Finally download the metaflow tutorials
              pushd /home/ec2-user/SageMaker

              if [ ! -d "metaflow-tutorials" ]; then
                metaflow tutorials pull
              fi

              popd

              source /home/ec2-user/anaconda3/bin/deactivate

              EOF
  SageMakerNotebookInstance:
    Condition: "EnableNotebook"
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Join ["", [!Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}"]]
      InstanceType: !Ref SagemakerInstance
      RoleArn: !GetAtt "SageMakerExecutionRole.Arn"
      LifecycleConfigName: !GetAtt "BasicNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName"


Outputs:
  MetaflowS3Bucket:
    Description: The Metaflow S3 bucket name
    Value: !Ref MetaflowS3Bucket
  MetaflowDataStoreS3Url:
    Description: Amazon S3 URL for Metaflow DataStore [METAFLOW_DATASTORE_SYSROOT_S3]
    Value: !Sub "s3://${MetaflowS3Bucket}/metaflow"
  MetaflowDataToolsS3Url:
    Description: Amazon S3 URL for Metaflow DataTools [METAFLOW_DATATOOLS_S3ROOT]
    Value: !Sub "s3://${MetaflowS3Bucket}/data"
  BatchJobQueueArn:
    Description: AWS Batch Job Queue ARN for Metaflow [METAFLOW_BATCH_JOB_QUEUE]
    Value: !Ref JobQueue
  ECSJobRoleForBatchJobs:
    Description: Role for AWS Batch to Access Amazon S3 [METAFLOW_ECS_S3_ACCESS_IAM_ROLE]
    Value: !GetAtt 'BatchS3TaskRole.Arn'
  ServiceUrl:
    Description: "URL for Metadata Service (Open to Public Access) [METAFLOW_SERVICE_URL]"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/"
  InternalServiceUrl:
    Description: "URL for Metadata Service (Accessible in VPC) [METAFLOW_SERVICE_INTERNAL_URL]"
    Value: !Sub "http://${NLB.DNSName}/"
  ApiKeyId:
    Condition: 'EnableAuth'
    Description: "API Gateway Key ID for Metadata Service. Fetch Key from AWS Console [METAFLOW_SERVICE_AUTH_KEY]"
    Value: !Ref 'ApiKey'
  MetaflowUserRoleArn:
    Condition: 'EnableRole'
    Description: "IAM Role for Metaflow Stack"
    Value: !GetAtt "MetaflowUserRole.Arn"
  SageMakerNoteBookURL:
    Condition: "EnableNotebook"
    Description: URL for SageMaker Notebook Instance
    Value: !Sub "https://${SageMakerNotebookInstance.NotebookInstanceName}.notebook.${AWS::Region}.sagemaker.aws/tree"
  SageMakerNoteBookInstanceName:
    Condition: "EnableNotebook"
    Description: The Instance Name of the Sagemaker Notebook
    Value: !Sub "${SageMakerNotebookInstance.NotebookInstanceName}"
