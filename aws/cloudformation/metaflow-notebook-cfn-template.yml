AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack to create a Jupyter notebook with Metaflow support"

Parameters:
  SagemakerInstance:
    Type: String
    Default: ml.t2.large
    AllowedValues: ["ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge"]
    Description: "Instance type for Sagemaker Notebook."
  S3UserDataBucket:
    Type: String
    Default: "user-data-bucket-name"
    Description: "The name of the S3 bucket that contains the user data (e.g. training data)"
  MetaflowS3Bucket:
    Type: String
    Description: "The plain name of the Metaflow S3 bucket (without s3://)"
    Default: "metaflow-bucket-name"
  MetaflowEcsS3AccessIamRole:
    Type: String
    Description: The arn of the batch S3 role of the Metaflow Compute Stack
    Default: "arn:aws:iam::ACCOUNT_ID:role/STACK_NAME-BatchS3TaskRole-RANDOM_STRING"
  MetaflowBatchJobQueue: 
    Type: String
    Description: "AWS Batch Job Queue ARN for Metaflow [METAFLOW_BATCH_JOB_QUEUE]"
    Default: "arn:aws:batch:REGION:ACCOUNT_ID:job-queue/job-queue-STACK_NAME"
  MetaflowDatastoreSysrootS3: 
    Type: String
    Description: "Amazon S3 URL for Metaflow DataStore [METAFLOW_DATASTORE_SYSROOT_S3]"
    Default: "s3://STACK_NAME-metaflows3bucket-RANDOM_STRING/metaflow"
  MetaflowDatatoolsS3Root: 
    Type: String
    Description: "Amazon S3 URL for Metaflow DataTools [METAFLOW_DATATOOLS_S3ROOT]"
    Default: "s3://STACK_NAME-metaflows3bucket-DATA/metaflow"
  MetaflowServiceUrl: 
    Type: String
    Description: "URL for Metadata Service (Open to Public Access) [METAFLOW_SERVICE_URL]"
    Default: "https://RANDOM_ID.execute-api.REGION.amazonaws.com/api/"
  NotebookIdleTimeInSeconds: 
    Type: Number
    Description: "Shut down an idle notebook after the number of seconds specified. Set to -1 if you do not want to shut it down at all."
    Default: "14400"

Resources:
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - sagemaker.amazonaws.com
          Action:
            - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: IamPassRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowPassRole"
              Effect: Allow
              Action: "iam:PassRole"
              Resource: "*"
              Condition:
                StringEquals:
                  iam:PassedToService: sagemaker.amazonaws.com
        - PolicyName: IamPassRoleMetaflowEcsS3AccessIamRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowPassRole"
              Effect: Allow
              Action: "iam:PassRole"
              Resource: !Ref MetaflowEcsS3AccessIamRole
        - PolicyName: CloudFormationPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowCloudFormation"
              Effect: Allow
              Action:
                - "cloudformation:DescribeStacks"
                - "cloudformation:DescribeStackEvents"
                - "cloudformation:DescribeStackResource"
                - "cloudformation:DescribeStackResources"
              Resource: "*"
        - PolicyName: EcrPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowEcr"
              Effect: Allow
              Action:
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
              Resource: "*"
        - PolicyName: BatchPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowBatch"
              Effect: Allow
              Action:
                - "batch:ListJobs"
                - "batch:DescribeComputeEnvironments"
                - "batch:DescribeJobDefinitions"
                - "batch:RegisterJobDefinition"
                - "batch:TerminateJob"
                - "batch:DescribeJobs"
                - "batch:DescribeJobQueues"
                - "batch:CancelJob"
                - "batch:SubmitJob"
              Resource: "*"
        - PolicyName: CloudWatchPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "AllowCloudWatch"
              Effect: Allow
              Action:
                - "cloudwatch:PutMetricData"
              Resource: "*"
        - PolicyName: LogPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "CreateLogStream"
                Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                Resource:
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/batch/job:log-stream:*"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:*"]]
              - Sid: "LogEvents"
                Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                Resource:
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:", !Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}", "/jupyter.log"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:", !Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}", "/LifecycleConfigOnCreate"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/sagemaker/NotebookInstances:log-stream:", !Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}", "/LifecycleConfigOnStart"]]
                  - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/batch/job:log-stream:*"]]
              - Sid: "LogGroup"
                Effect: Allow
                Action:
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:CreateLogGroup"
                Resource: "*"
        - PolicyName: SageMakerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "SageMakerNotebook"
              Effect: Allow
              Action:
                - "sagemaker:DescribeNotebook*"
                - "sagemaker:StartNotebookInstance"
                - "sagemaker:StopNotebookInstance"
                - "sagemaker:UpdateNotebookInstance"
                - "sagemaker:CreatePresignedNotebookInstanceUrl"
              Resource:
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance/${AWS::StackName}*"
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance-lifecycle-config/basic*"
        - PolicyName: AllowSagemaker
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowSagemakerCreate
                Effect: Allow
                Action: sagemaker:CreateTrainingJob
                Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
              - Sid: AllowSagemakerDescribe
                Effect: Allow
                Action: sagemaker:DescribeTrainingJob
                Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:training-job/*
        - PolicyName: CustomS3ListAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "BucketAccess"
              Effect: Allow
              Action: "s3:ListBucket"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref MetaflowS3Bucket]]
        - PolicyName: CustomS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "ObjectAccess"
              Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:DeleteObject"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref MetaflowS3Bucket, "/*"]]
        - PolicyName: S3UserDataListAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "BucketAccess"
              Effect: Allow
              Action: "s3:ListBucket"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref "S3UserDataBucket"]]
        - PolicyName: S3UserDataCustomS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "ObjectAccess"
              Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:DeleteObject"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref "S3UserDataBucket", "/*"]]
        - PolicyName: DenyPresigned
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: "DenyPresigned"
              Effect: Deny
              Action: s3:*
              Resource: "*"
              Condition:
                StringNotEquals:
                  s3:authType: REST-HEADER
  BasicNotebookInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      OnCreate:
        - Content:
            Fn::Base64: !Sub |
              #!/bin/bash
              echo 'Creating notebook...'
      OnStart:
        - Content:
            Fn::Base64: !Sub |
              #!/bin/bash

              set -e

              #################
              # Auto Shutdown 
              #################
              
              # This script stops a SageMaker notebook once it's idle for more than 4 hours (default time)
              # You can change the idle time for stop using the environment variable below.
              # If you want the notebook the stop only if no browsers are open, remove the --ignore-connections flag

              # PARAMETERS
              idle_time=${NotebookIdleTimeInSeconds}

              echo "Fetching the autostop script"
              wget https://raw.githubusercontent.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/master/scripts/auto-stop-idle/autostop.py

              echo "Starting the SageMaker autostop script in cron"
              
              if (( idle_time > 0 )); then
                echo "Adding idle time cronjob"
                (crontab -l 2>/dev/null; echo "5 * * * * /usr/bin/python $PWD/autostop.py --time $idle_time --ignore-connections") | crontab -
              else
                echo "Idle time is smaller than 0 minutes, not adding to crontab"
              fi

              ##################################
              # Init Metaflow Config
              ##################################

              echo "Exporting Metaflow Env Variables"
              env_variables='export AWS_DEFAULT_REGION="${AWS::Region}" && export METAFLOW_HOME="/home/ec2-user/.metaflowconfig" && export METAFLOW_PROFILE="default"' 

              echo $env_variables >> /etc/profile.d/jupyter-env.sh 
              initctl restart jupyter-server --no-wait

              sudo -u ec2-user -i <<'EOF'

              ##################################
              # Install Python packages
              ##################################

              # now installing metaflow and testing the connection 
              # We use the tensorflow_p36 environment for this
              source /home/ec2-user/anaconda3/bin/activate tensorflow_p36

              pip install --upgrade metaflow
              pip install --upgrade click 

              ##################################
              # Create the Metaflow config and install the tutorials
              ##################################

              echo "Creating Metaflow config"
              mkdir -p $METAFLOW_HOME
              metaflow_config_file=$METAFLOW_HOME/config_$METAFLOW_PROFILE.json

              # it is hard to do multiline strings in CF, therefore we are appending to the metaflow config
              echo '{ ' > $metaflow_config_file
              echo '"METAFLOW_DEFAULT_DATASTORE": "s3",' >> $metaflow_config_file
              echo '"METAFLOW_DATASTORE_SYSROOT_S3": "${MetaflowDatastoreSysrootS3}",' >> $metaflow_config_file
              echo '"METAFLOW_DATATOOLS_SYSROOT_S3": "${MetaflowDatatoolsS3Root}",' >> $metaflow_config_file
              echo '"METAFLOW_BATCH_JOB_QUEUE": "${MetaflowBatchJobQueue}",' >> $metaflow_config_file
              echo '"METAFLOW_BATCH_CONTAINER_IMAGE": "python:3",' >> $metaflow_config_file
              echo '"METAFLOW_BATCH_CONTAINER_REGISTRY": "docker.io",' >> $metaflow_config_file
              echo '"METAFLOW_ECS_S3_ACCESS_IAM_ROLE": "${MetaflowEcsS3AccessIamRole}",' >> $metaflow_config_file
              echo '"METAFLOW_DEFAULT_METADATA": "service",' >> $metaflow_config_file
              echo '"METADATA_SERVICE_URL": "${MetaflowServiceUrl}",' >> $metaflow_config_file
              echo '"METAFLOW_SERVICE_URL": "${MetaflowServiceUrl}",' >> $metaflow_config_file
              echo '"METAFLOW_CONDA_PACKAGE_S3ROOT": "s3://${MetaflowS3Bucket}/conda"' >> $metaflow_config_file
              echo '}' >> $metaflow_config_file

              # Finally download the metaflow tutorials
              pushd /home/ec2-user/SageMaker

              if [ ! -d "metaflow-tutorials" ]; then
                metaflow tutorials pull
              fi

              popd

              source /home/ec2-user/anaconda3/bin/deactivate

              EOF
  SageMakerNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Join ["", [!Ref "AWS::StackName", "-NotebookInstance-", "{{resolve:secretsmanager:", !Ref RandomString, ":SecretString:password}}"]]
      InstanceType: !Ref SagemakerInstance
      RoleArn: !GetAtt "SageMakerExecutionRole.Arn"
      LifecycleConfigName: !GetAtt "BasicNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName"

  RandomString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Random String (misusing password for this)"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        ExcludePunctuation: "true"
        ExcludeUppercase: "true"
        PasswordLength: 8
        ExcludeCharacters: '"@/\-_'

Outputs:
  SageMakerNoteBookURL:
    Description: URL for SageMaker Notebook Instance
    Value: !Sub "https://${SageMakerNotebookInstance.NotebookInstanceName}.notebook.${AWS::Region}.sagemaker.aws/tree"
  SageMakerNoteBookInstanceName:
    Description: The Instance Name of the Sagemaker Notebook
    Value: !Sub "${SageMakerNotebookInstance.NotebookInstanceName}"
